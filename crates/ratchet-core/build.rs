use anyhow::Context;
use std::io::Write;
use std::path::{Path, PathBuf};
use std::process::Command;

use tera::Tera;

#[derive(Debug)]
pub struct KernelGenerator {
    tera: Tera,
    dest_path: PathBuf,
    templates_path: PathBuf,
}

impl Default for KernelGenerator {
    fn default() -> Self {
        let base_path = Path::new(env!("CARGO_MANIFEST_DIR")).join("kernels");
        KernelGenerator {
            tera: Tera::default(),
            dest_path: base_path.join("generated"),
            templates_path: base_path.join("templates"),
        }
    }
}

impl KernelGenerator {
    fn generate(&mut self) -> anyhow::Result<()> {
        Ok(())
    }
}

fn embed_kernels() -> anyhow::Result<()> {
    let out_dir = env!("CARGO_MANIFEST_DIR").to_string() + "/src";
    let mut file = std::fs::File::create(Path::new(&out_dir).join("kernels.rs")).context(
        "Failed to create `src/kernels.rs`. Make sure you have `src` directory in your project.",
    )?;
    writeln!(
        &file,
        "// This file is generated by build.rs. Do not edit it manually."
    )?;
    writeln!(&mut file, "use std::collections::HashMap;")?;
    writeln!(&mut file, "use lazy_static::lazy_static;")?;
    writeln!(&mut file, "lazy_static! {{")?;
    writeln!(
        &mut file,
        "pub static ref KERNELS: HashMap<&'static str, &'static str> = {{"
    )?;
    writeln!(&mut file, "    let mut m = HashMap::new();")?;
    for entry in
        globwalk::glob(env!("CARGO_MANIFEST_DIR").to_string() + "/kernels/**.wgsl")?.flatten()
    {
        let path = entry.path();
        let name = path.file_stem().unwrap().to_str().unwrap();

        writeln!(
            &mut file,
            "    m.insert(\"{}\", include_str!(r\"{}\"));",
            name,
            path.display()
        )?;
    }
    writeln!(&mut file, "    m")?;
    writeln!(&mut file, "}};")?;
    writeln!(&mut file, "}}")?;

    Ok(())
}

fn main() {
    let mut generator = KernelGenerator::default();
    generator.generate().unwrap();
    embed_kernels().unwrap();
    if let Err(e) = Command::new("cargo").args(["fmt"]).status() {
        eprintln!("Failed to execute `cargo fmt`: {}", e);
    }
}
